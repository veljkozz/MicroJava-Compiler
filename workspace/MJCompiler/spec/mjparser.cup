package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.concepts.*;

parser code {:
	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
   	public static class SimpleType
   	{
   		public SimpleType(Struct s) {this.s = s;}
   		public Struct s;
   		public Integer num; Character character; Boolean bool;
   	}
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        //report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {: errorDetected = false; :}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, DOT, LPAREN, RPAREN, LBRACKET, RBRACKET, EQUAL, RETURN, PLUS, MINUS, COMMA;
terminal READ, PRINT, VOID;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;
terminal String IDENT;
terminal IF, ELSE, AND, OR, EQ, NEQ, GRT, GRE, LSS, LSSE;
terminal CONST, CLASS, RECORD, NEW;
terminal DO, WHILE, BREAK, CONTINUE;
terminal STAR, SLASH, PERCENT;
terminal EXTENDS, SUPER;

nonterminal Declarations, Declaration, GlobalMethods;
nonterminal VarDeclarations, VarDeclarationsList, ConstDeclarations, ClassDeclaration, RecordDeclaration; 
nonterminal MethodList, FormParams, FormParamList, FormParam, OptionalVarDeclarations;
nonterminal RecordContent, ClassContent, ClassMethods, Constructor;

nonterminal ClassVarDeclarations, ClassVarDeclarationsList, ClassVar, ClassVarList;
nonterminal Extends;
nonterminal String ClassName;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodType;

nonterminal rs.ac.bg.etf.pp1.MJParser.SimpleType Val;

nonterminal Var, VarList, ConstVarList;
nonterminal StatementList, Statement, Statements, SingleStatement;
nonterminal DesignatorStatement, Designator, DesignatorList;
nonterminal PrintStmt;
nonterminal Expr, AssignExpr, Term, TermList;
nonterminal ActualPars;
nonterminal MulOp, AddOp, RelOp, AssignOp;
nonterminal Factor;
nonterminal Condition, CondTerm, CondFact;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodTypeName, MethodDecl;
precedence left ELSE;

Program ::= (Program) PROG ProgName:p Declarations LBRACE GlobalMethods RBRACE;

ProgName ::= (ProgName) IDENT:progName;

Declarations ::= Declarations Declaration
	| /*epsilon*/
	;

Declaration ::= (Declarations_VarDecl) VarDeclarations
			| (Declarations_ConstDecl) ConstDeclarations
			| (Declarations_ClassDecl) ClassDeclaration
			| (Declarations_RecordDecl) RecordDeclaration
			;

ConstDeclarations ::= (Const_Declarations) CONST Type ConstVarList SEMI
	//| error SEMI:l
	//{:  parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
	;
ConstVarList ::= (ConstDecl_Single) IDENT:varName EQUAL Val
	| (ConstDecl_List) IDENT:varName EQUAL Val COMMA ConstVarList
	| error:l
	{:  parser.report_error("Error: invalid constant declaration in line " + lleft, null); :}
;

VarDeclarations ::= (Var_Declarations) Type VarList SEMI;

Val ::= (Val_Num) NUMBER
	| (Val_Char) CHAR
	| (Val_Bool) BOOL
	;
Var ::= (Var_) IDENT:varName
	| (Var_Array) IDENT:varName LBRACKET RBRACKET
	| error:l
	{: parser.report_error("Error: invalid variable declaration at line " + lleft, null); :}
	;
Type ::= (Type) IDENT:typeName;

VarList ::= (Var_List) Var COMMA VarList
		| (OneVar) Var
		;

ClassName ::= (Class_Name) IDENT:name;

ClassDeclaration ::= (Class_NoParent_Declaration) CLASS ClassName:name LBRACE ClassContent RBRACE
	| (Class_Parent_Declaration) CLASS ClassName:name Extends LBRACE ClassContent RBRACE
		;


Extends ::= EXTENDS IDENT
	| error:l
	{: parser.report_error("Error: invalid extends declaration at line " + lleft, null); :}
	;

ClassContent ::= ClassMethods
	| ClassVarDeclarationsList ClassMethods
	| ClassVarDeclarationsList
	| /*epsilon*/
	;

ClassVarDeclarationsList ::= ClassVarDeclarations ClassVarDeclarationsList
	| ClassVarDeclarations
	| error:l
	{: parser.report_error("Error: invalid class attribute declarations at line " + lleft, null); :}
	;

ClassVarDeclarations ::= Type ClassVarList SEMI;

ClassVarList ::= ClassVar COMMA ClassVarList
		| ClassVar
		| error:l
		{: parser.report_error("Error: invalid class attribute declaration at line " + lleft, null); :}
		;
ClassVar ::= IDENT:varName
	| IDENT LBRACKET RBRACKET
	;

ClassMethods ::= LBRACE Constructor MethodList RBRACE
	| LBRACE MethodList RBRACE
	| LBRACE Constructor RBRACE
	| LBRACE RBRACE
	;
	
Constructor ::= IDENT LPAREN RPAREN OptionalVarDeclarations Statements;	
		
RecordDeclaration ::= (Record_Declaration) RECORD IDENT LBRACE RecordContent RBRACE;

RecordContent ::= RecordContent VarDeclarations
	| /*epsilon*/
	;

GlobalMethods ::= (Global_Methods) MethodList
	| /*epsilon*/
	;

MethodList ::= MethodList MethodDecl
	| MethodDecl
	;

MethodDecl ::= (Method_Decl) MethodTypeName LPAREN FormParams RPAREN OptionalVarDeclarations Statements;

MethodTypeName ::= (MethodTypeName) MethodType:methodType IDENT:methodName;

MethodType ::= (Method_Type) Type:typeName
			| (VoidType) VOID
			;

OptionalVarDeclarations ::= (Optional_VarDeclarations) VarDeclarations
						| (Optional_NoVarDeclarations) /*epsilon*/
						;

FormParams ::= (FormParams_List) FormParamList
		| (NoFormParam) /*epsilon*/
		;
		
FormParamList ::= (FormParam_List) FormParamList COMMA FormParam
		| (SingleFormalParam) FormParam
		;

FormParam ::= Type IDENT
	| error:l
	{: parser.report_error("Error: invalid parameter at line " + lleft, null); :}
	;

StatementList ::= (Statement_List) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Statement ::= SingleStatement
	| Statements
	;

Statements ::= LBRACE StatementList RBRACE;
				
SingleStatement ::= (Statement_Designator) DesignatorStatement SEMI
			| (IfStmt) IF LPAREN Condition RPAREN Statement
			| (IfElseStmt) IF LPAREN Condition RPAREN Statement ELSE Statement
			| (DoWhileStmt) DO Statements WHILE LPAREN Condition RPAREN SEMI
			| (BreakStmt) BREAK SEMI
			| (ContinueStmt) CONTINUE SEMI
			| (ReturnStmt) RETURN SEMI
			| (ReturnExprStmt) RETURN Expr SEMI
			| (ReadStmt) READ LPAREN Designator RPAREN SEMI
			| (Print_Stmt) PrintStmt SEMI
			;

PrintStmt ::= PRINT LPAREN Expr RPAREN
	| PRINT LPAREN Expr COMMA NUMBER RPAREN
	;

DesignatorStatement ::= (Assignment) Designator AssignOp AssignExpr
					| (FuncCall) Designator LPAREN ActualPars RPAREN
					| (PostIncrement) Designator PLUS PLUS 
					| (PostDecrement) Designator MINUS MINUS
					; 
					
Condition ::= CondTerm
	| Condition OR CondTerm
	| error:l
	{: parser.report_error("Error: invalid condition at line " + lleft, null); :}
	;
	
CondTerm ::= CondFact
	| CondTerm AND CondFact
	;

CondFact ::= Expr 
	| Expr RelOp Expr
	;

AssignExpr ::= Expr
	| error:l
	{: parser.report_error("Error: invalid assignment at line " + lleft, null); :}
	;

Expr ::= TermList
	| MINUS TermList
	;
	
TermList ::= Term
	| Term AddOp TermList
	;

Term ::= Factor MulOp Term
	| Factor
	;

Factor ::= Designator 
	| (Factor_FunCall) Designator LPAREN ActualPars RPAREN
	| NUMBER
	| CHAR
	| BOOL
	| NEW Type 
	| NEW Type LBRACKET Expr RBRACKET
	| LPAREN Expr RPAREN
	;
	
Designator ::= IDENT DesignatorList;

DesignatorList ::= LBRACKET Expr RBRACKET DesignatorList
	| DOT IDENT DesignatorList
	| /*epsilon*/
	;


ActualPars ::= Expr
	| ActualPars COMMA Expr
	| /* epsilon*/
	;


AssignOp ::= EQUAL;

AddOp ::= PLUS
	| MINUS
	;

MulOp ::= STAR
	| SLASH
	| PERCENT
	;

RelOp ::= EQ
	| NEQ
	| GRT
	| GRE
	| LSS
	| LSSE
	;
	
	
	


