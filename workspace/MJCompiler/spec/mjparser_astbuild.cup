package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.concepts.*;

parser code {:
	public boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
   	public static class SimpleType
   	{
   		public SimpleType(Struct s) {this.s = s;}
   		public Struct s;
   		public rs.etf.pp1.symboltable.concepts.Obj obj = null;
   		public Integer num; Character character; Boolean bool;
   	}
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
    	errorDetected = true;
        //report_error("\nSyntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    	errorDetected = true;
        report_fatal_error("Fatal error, can't continue parsing", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {: errorDetected = false; :}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, DOT, LPAREN, RPAREN, LBRACKET, RBRACKET, EQUAL, RETURN, PLUS, MINUS, COMMA;
terminal READ, PRINT, VOID;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;
terminal String IDENT;
terminal IF, ELSE, AND, OR;
terminal String EQ, NEQ, GRT, GRE, LSS, LSSE;
terminal CONST, CLASS, RECORD, NEW;
terminal DO, WHILE, BREAK, CONTINUE;
terminal STAR, SLASH, PERCENT;
terminal EXTENDS, SUPER;

nonterminal Declarations Declarations;
nonterminal Declaration Declaration;
nonterminal GlobalMethods GlobalMethods;
nonterminal VarDeclarations VarDeclarations;
nonterminal VarDeclarationsList VarDeclarationsList;
nonterminal ConstDeclarations ConstDeclarations;
nonterminal ClassDeclaration ClassDeclaration;
nonterminal RecordDeclaration RecordDeclaration; 
nonterminal MethodList MethodList;
nonterminal FormParams FormParams;
nonterminal FormParamList FormParamList;
nonterminal FormParam FormParam;
nonterminal OptionalVarDeclarations OptionalVarDeclarations;
nonterminal RecordContent RecordContent;
nonterminal RecordName RecordName;
nonterminal ClassContent ClassContent;
nonterminal ClassMethods ClassMethods;
nonterminal Constructor Constructor;
nonterminal ConstructorName ConstructorName;
nonterminal ClassVarDeclarations ClassVarDeclarations;
nonterminal ClassVarDeclarationsList ClassVarDeclarationsList;
nonterminal ClassVar ClassVar;
nonterminal ClassVarList ClassVarList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassName, Extends;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodType;

nonterminal rs.ac.bg.etf.pp1.MJParser.SimpleType Val, ConstVal;
nonterminal Var Var;
nonterminal VarList VarList;
nonterminal ConstVarList ConstVarList;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Statements Statements;
nonterminal SingleStatement SingleStatement;

nonterminal DesignatorStatement DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorList, DesignatorName;

nonterminal SuperCall SuperCall;
nonterminal PrintStmt PrintStmt;
nonterminal ActualPars ActualPars;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr, AssignExpr, Term, TermList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, CondTerm, CondFact;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MulOp, AddOp, RelOp, AssignOp;

nonterminal DO_NT DO_NT;
nonterminal If If;
nonterminal Else Else;
nonterminal Or Or;
nonterminal And And;
nonterminal While While;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodTypeName, MethodDecl;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p Declarations:D1 LBRACE GlobalMethods:G2 RBRACE {: RESULT=new Program(p, D1, G2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

Declarations ::= Declarations:D1 Declaration:D2 {: RESULT=new DeclarationsDerived1(D1, D2); RESULT.setLine(D1left); :}
	| {: RESULT=new DeclarationsDerived2(); :} /*epsilon*/
	;

Declaration ::= (Declarations_VarDecl) VarDeclarations:V1 {: RESULT=new Declarations_VarDecl(V1); RESULT.setLine(V1left); :}
			| (Declarations_ConstDecl) ConstDeclarations:C1 {: RESULT=new Declarations_ConstDecl(C1); RESULT.setLine(C1left); :}
			| (Declarations_ClassDecl) ClassDeclaration:C1 {: RESULT=new Declarations_ClassDecl(C1); RESULT.setLine(C1left); :}
			| (Declarations_RecordDecl) RecordDeclaration:R1 {: RESULT=new Declarations_RecordDecl(R1); RESULT.setLine(R1left); :}
			;

ConstDeclarations ::= (Const_Declarations) CONST Type:T1 ConstVarList:C2 SEMI {: RESULT=new Const_Declarations(T1, C2); RESULT.setLine(T1left); :}
	//| error SEMI:l
	//{:  parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
	;
ConstVarList ::= (ConstDecl_Single) IDENT:varName EQUAL ConstVal:C1 {: RESULT=new ConstDecl_Single(varName, C1); RESULT.setLine(varNameleft); :}
	| (ConstDecl_List) IDENT:varName EQUAL ConstVal:C1 COMMA ConstVarList:C2 {: RESULT=new ConstDecl_List(varName, C1, C2); RESULT.setLine(varNameleft); :}
	| error:l
	{:  parser.report_error("Error: invalid constant declaration in line " + lleft, null); :} {: RESULT=new ConstVarListDerived1(); :}
;

VarDeclarations ::= (Var_Declarations) Type:T1 VarList:V2 SEMI {: RESULT=new Var_Declarations(T1, V2); RESULT.setLine(T1left); :}
	| (VarDecl_Error) error SEMI:l
	{: parser.report_error("Error: invalid declaration" + lleft, null); :} {: RESULT=new VarDecl_Error(); :}
	;

ConstVal ::= (ConstVal_Num_Pos) NUMBER:N1 {: RESULT=new ConstVal_Num_Pos(N1); RESULT.setLine(N1left); :}
	| (ConstVal_Num_Neg) MINUS NUMBER:N1 {: RESULT=new ConstVal_Num_Neg(N1); RESULT.setLine(N1left); :}
	| (ConstVal_Char) CHAR:C1 {: RESULT=new ConstVal_Char(C1); RESULT.setLine(C1left); :}
	| (ConstVal_Bool) BOOL:B1 {: RESULT=new ConstVal_Bool(B1); RESULT.setLine(B1left); :}
	;

Val ::= (Val_Num) NUMBER:N1 {: RESULT=new Val_Num(N1); RESULT.setLine(N1left); :}
	| (Val_Char) CHAR:C1 {: RESULT=new Val_Char(C1); RESULT.setLine(C1left); :}
	| (Val_Bool) BOOL:B1 {: RESULT=new Val_Bool(B1); RESULT.setLine(B1left); :}
	;

Var ::= (Var_) IDENT:varName {: RESULT=new Var_(varName); RESULT.setLine(varNameleft); :}
	| (Var_Arr) IDENT:varName LBRACKET RBRACKET {: RESULT=new Var_Arr(varName); RESULT.setLine(varNameleft); :}
	| error:l
	{: parser.report_error("Error: invalid variable declaration at line " + lleft, null); :} {: RESULT=new VarDerived1(); :}
	;
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

VarList ::= (Var_List) VarList:V1 COMMA Var:V2 {: RESULT=new Var_List(V1, V2); RESULT.setLine(V1left); :}
		| (OneVar) Var:V1 {: RESULT=new OneVar(V1); RESULT.setLine(V1left); :}
		;

ClassName ::= (ClassName) IDENT:name {: RESULT=new ClassName(name); RESULT.setLine(nameleft); :};

ClassDeclaration ::= (Class_NoParent_Declaration) CLASS ClassName:C1 LBRACE ClassContent:C2 RBRACE {: RESULT=new Class_NoParent_Declaration(C1, C2); RESULT.setLine(C1left); :}
	| (Class_Parent_Declaration) CLASS ClassName:C1 Extends:parentObj LBRACE ClassContent:C2 RBRACE {: RESULT=new Class_Parent_Declaration(C1, parentObj, C2); RESULT.setLine(C1left); :}
		;


Extends ::= (Extends_Parent) EXTENDS IDENT:parentName {: RESULT=new Extends_Parent(parentName); RESULT.setLine(parentNameleft); :}
	| error:l
	{: parser.report_error("Error: invalid extends declaration at line " + lleft, null); :} {: RESULT=new ExtendsDerived1(); :}
	;

ClassContent ::= ClassMethods:C1 {: RESULT=new ClassContentDerived1(C1); RESULT.setLine(C1left); :}
	| ClassVarDeclarationsList:C1 ClassMethods:C2 {: RESULT=new ClassContentDerived2(C1, C2); RESULT.setLine(C1left); :}
	| ClassVarDeclarationsList:C1 {: RESULT=new ClassContentDerived3(C1); RESULT.setLine(C1left); :}
	| {: RESULT=new ClassContentDerived4(); :} /*epsilon*/
	;

ClassVarDeclarationsList ::= ClassVarDeclarations:C1 ClassVarDeclarationsList:C2 {: RESULT=new ClassVarDeclarationsListDerived1(C1, C2); RESULT.setLine(C1left); :}
	| ClassVarDeclarations:C1 {: RESULT=new ClassVarDeclarationsListDerived2(C1); RESULT.setLine(C1left); :}
	| error:l
	{: parser.report_error("Error: invalid class attribute declarations at line " + lleft, null); :} {: RESULT=new ClassVarDeclarationsListDerived3(); :}
	;

ClassVarDeclarations ::= (ClassVarDecl) Type:T1 ClassVarList:C2 SEMI {: RESULT=new ClassVarDecl(T1, C2); RESULT.setLine(T1left); :};

ClassVarList ::= ClassVar:C1 COMMA ClassVarList:C2 {: RESULT=new ClassVarListDerived1(C1, C2); RESULT.setLine(C1left); :}
		| ClassVar:C1 {: RESULT=new ClassVarListDerived2(C1); RESULT.setLine(C1left); :}
		| error:l
		{: parser.report_error("Error: invalid class attribute declaration at line " + lleft, null); :} {: RESULT=new ClassVarListDerived3(); :}
		;
ClassVar ::= (Class_Var) IDENT:varName {: RESULT=new Class_Var(varName); RESULT.setLine(varNameleft); :}
	| (Class_Var_Arr) IDENT:varName LBRACKET RBRACKET {: RESULT=new Class_Var_Arr(varName); RESULT.setLine(varNameleft); :}
	;

ClassMethods ::= LBRACE Constructor:C1 MethodList:M2 RBRACE {: RESULT=new ClassMethodsDerived1(C1, M2); RESULT.setLine(C1left); :}
	| LBRACE MethodList:M1 RBRACE {: RESULT=new ClassMethodsDerived2(M1); RESULT.setLine(M1left); :}
	| LBRACE Constructor:C1 RBRACE {: RESULT=new ClassMethodsDerived3(C1); RESULT.setLine(C1left); :}
	| LBRACE RBRACE {: RESULT=new ClassMethodsDerived4(); :}
	;
	
Constructor ::= (Constructor) ConstructorName:C1 LPAREN RPAREN OptionalVarDeclarations:O2 Statements:S3 {: RESULT=new Constructor(C1, O2, S3); RESULT.setLine(C1left); :};	
ConstructorName ::= (ConstructorName) IDENT:name {: RESULT=new ConstructorName(name); RESULT.setLine(nameleft); :};
		
RecordDeclaration ::= (RecordDeclaration) RECORD RecordName:R1 LBRACE RecordContent:R2 RBRACE {: RESULT=new RecordDeclaration(R1, R2); RESULT.setLine(R1left); :};

RecordName ::= (RecordName) IDENT:name {: RESULT=new RecordName(name); RESULT.setLine(nameleft); :};

RecordContent ::= RecordContent:R1 ClassVarDeclarations:C2 {: RESULT=new RecordContentDerived1(R1, C2); RESULT.setLine(R1left); :}
	| {: RESULT=new RecordContentDerived2(); :} /*epsilon*/
	;

GlobalMethods ::= (Global_Methods) MethodList:M1 {: RESULT=new Global_Methods(M1); RESULT.setLine(M1left); :}
	| (NoGlobal_Methods) {: RESULT=new NoGlobal_Methods(); :} /*epsilon*/
	;

MethodList ::= MethodList:M1 MethodDecl:M2 {: RESULT=new MethodListDerived1(M1, M2); RESULT.setLine(M1left); :}
	| MethodDecl:M1 {: RESULT=new MethodListDerived2(M1); RESULT.setLine(M1left); :}
	;

MethodDecl ::= (Method_Decl) MethodTypeName:M1 LPAREN FormParams:F2 RPAREN OptionalVarDeclarations:O3 Statements:S4 {: RESULT=new Method_Decl(M1, F2, O3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeName) MethodType:methodType IDENT:methodName {: RESULT=new MethodTypeName(methodType, methodName); RESULT.setLine(methodTypeleft); :};

MethodType ::= (Method_Type) Type:typeName {: RESULT=new Method_Type(typeName); RESULT.setLine(typeNameleft); :}
			| (VoidType) VOID {: RESULT=new VoidType(); :}
			;

OptionalVarDeclarations ::= (Optional_VarDeclarations) VarDeclarations:V1 OptionalVarDeclarations:O2 {: RESULT=new Optional_VarDeclarations(V1, O2); RESULT.setLine(V1left); :}
						| (Optional_NoVarDeclarations) {: RESULT=new Optional_NoVarDeclarations(); :} /*epsilon*/
						;

FormParams ::= (FormParams_List) FormParamList:F1 {: RESULT=new FormParams_List(F1); RESULT.setLine(F1left); :}
		| (NoFormParam) {: RESULT=new NoFormParam(); :} /*epsilon*/
		;
		
FormParamList ::= (FormParam_List) FormParamList:F1 COMMA FormParam:F2 {: RESULT=new FormParam_List(F1, F2); RESULT.setLine(F1left); :}
		| (SingleFormalParam) FormParam:F1 {: RESULT=new SingleFormalParam(F1); RESULT.setLine(F1left); :}
		;

FormParam ::= (Form_Param) Type:typename IDENT:varname {: RESULT=new Form_Param(typename, varname); RESULT.setLine(typenameleft); :}
	| (Form_Param_Arr) Type:typename IDENT:varname LBRACKET RBRACKET {: RESULT=new Form_Param_Arr(typename, varname); RESULT.setLine(typenameleft); :}
	| error:l
	{: parser.report_error("Error: invalid parameter at line " + lleft, null); :} {: RESULT=new FormParamDerived1(); :}
	;

StatementList ::= (Statement_List) StatementList:S1 Statement:S2 {: RESULT=new Statement_List(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;

Statement ::= SingleStatement:S1 {: RESULT=new StatementDerived1(S1); RESULT.setLine(S1left); :}
	| Statements:S1 {: RESULT=new StatementDerived2(S1); RESULT.setLine(S1left); :}
	;

Statements ::= (Statements) LBRACE StatementList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :};
				
SingleStatement ::= (Statement_Designator) DesignatorStatement:D1 SEMI {: RESULT=new Statement_Designator(D1); RESULT.setLine(D1left); :}
			| (IfStmt) If:I1 LPAREN Condition:C2 RPAREN Statement:S3 {: RESULT=new IfStmt(I1, C2, S3); RESULT.setLine(I1left); :}
			| (IfElseStmt) If:I1 LPAREN Condition:C2 RPAREN Statement:S3 Else:E4 Statement:S5 {: RESULT=new IfElseStmt(I1, C2, S3, E4, S5); RESULT.setLine(I1left); :}
			| (DoWhileStmt) DO_NT:D1 Statements:S2 While:W3 LPAREN Condition:C4 RPAREN SEMI {: RESULT=new DoWhileStmt(D1, S2, W3, C4); RESULT.setLine(D1left); :}
			| (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			| (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			| (ReturnStmt) RETURN SEMI {: RESULT=new ReturnStmt(); :}
			| (ReturnExprStmt) RETURN Expr:E1 SEMI {: RESULT=new ReturnExprStmt(E1); RESULT.setLine(E1left); :}
			| (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			| (Print_Stmt) PrintStmt:P1 SEMI {: RESULT=new Print_Stmt(P1); RESULT.setLine(P1left); :}
			;
DO_NT ::= (DO_NT) DO {: RESULT=new DO_NT(); :}; 
If ::= (If_) IF {: RESULT=new If_(); :};
Else ::= (Else_) ELSE {: RESULT=new Else_(); :};
While ::= (While_) WHILE {: RESULT=new While_(); :};

PrintStmt ::= (PrintStmt_) PRINT LPAREN Expr:E1 RPAREN {: RESULT=new PrintStmt_(E1); RESULT.setLine(E1left); :}
	| (PrintStmt_Num) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN {: RESULT=new PrintStmt_Num(E1, N2); RESULT.setLine(E1left); :}
	;

DesignatorStatement ::= (Assignment) Designator:D1 AssignOp:A2 AssignExpr:A3 {: RESULT=new Assignment(D1, A2, A3); RESULT.setLine(D1left); :}
					| (FuncCall) Designator:D1 LPAREN ActualPars:A2 RPAREN {: RESULT=new FuncCall(D1, A2); RESULT.setLine(D1left); :}
					| (Super_Call_Stmt) SuperCall:S1 LPAREN ActualPars:A2 RPAREN {: RESULT=new Super_Call_Stmt(S1, A2); RESULT.setLine(S1left); :}
					| (PostIncrement) Designator:D1 PLUS PLUS {: RESULT=new PostIncrement(D1); RESULT.setLine(D1left); :} 
					| (PostDecrement) Designator:D1 MINUS MINUS {: RESULT=new PostDecrement(D1); RESULT.setLine(D1left); :}
					| error:l
					{: parser.report_error("Error: in statement at line " + lleft, null); :} {: RESULT=new DesignatorStatementDerived1(); :}
					; 

SuperCall ::= (Super_Call) SUPER {: RESULT=new Super_Call(); :};

Condition ::= (Condition_CondTerm) CondTerm:C1 {: RESULT=new Condition_CondTerm(C1); RESULT.setLine(C1left); :}
	|(Condition_List) Condition:C1 Or:O2 CondTerm:C3 {: RESULT=new Condition_List(C1, O2, C3); RESULT.setLine(C1left); :}
	| error:l
	{: parser.report_error("Error: invalid condition at line " + lleft, null); :} {: RESULT=new ConditionDerived1(); :}
	;

Or ::= (Or) OR {: RESULT=new Or(); :};	
	
CondTerm ::= (CondTerm_CondFact) CondFact:C1 {: RESULT=new CondTerm_CondFact(C1); RESULT.setLine(C1left); :}
	| (CondTerm_List) CondTerm:C1 And:A2 CondFact:C3 {: RESULT=new CondTerm_List(C1, A2, C3); RESULT.setLine(C1left); :}
	;

And ::= (And) AND {: RESULT=new And(); :};

CondFact ::= (CondFact_Expr) Expr:E1 {: RESULT=new CondFact_Expr(E1); RESULT.setLine(E1left); :} 
	| (CondFact_Relop) Expr:E1 RelOp:R2 Expr:E3 {: RESULT=new CondFact_Relop(E1, R2, E3); RESULT.setLine(E1left); :}
	;

AssignExpr ::= (Assign_Expr) Expr:E1 {: RESULT=new Assign_Expr(E1); RESULT.setLine(E1left); :}
	| error:l
	{: parser.report_error("Error: invalid assignment at line " + lleft, null); :} {: RESULT=new AssignExprDerived1(); :}
	;

Expr ::= (Expr_Pos) TermList:T1 {: RESULT=new Expr_Pos(T1); RESULT.setLine(T1left); :}
	| (Expr_Neg) MINUS TermList:T1 {: RESULT=new Expr_Neg(T1); RESULT.setLine(T1left); :}
	;
	
TermList ::= (TermList_Term) Term:T1 {: RESULT=new TermList_Term(T1); RESULT.setLine(T1left); :}
	| (TermList_AddOp) TermList:T1 AddOp:A2 Term:T3 {: RESULT=new TermList_AddOp(T1, A2, T3); RESULT.setLine(T1left); :} 
	;

Term ::= (Term_MulOp) Term:T1 MulOp:M2 Factor:F3 {: RESULT=new Term_MulOp(T1, M2, F3); RESULT.setLine(T1left); :} 
	| (Term_Fact) Factor:F1 {: RESULT=new Term_Fact(F1); RESULT.setLine(F1left); :}
	;

Factor ::= (Factor_Designator) Designator:D1 {: RESULT=new Factor_Designator(D1); RESULT.setLine(D1left); :} 
	| (Factor_FunCall) Designator:D1 LPAREN ActualPars:A2 RPAREN {: RESULT=new Factor_FunCall(D1, A2); RESULT.setLine(D1left); :}
	| (Factor_Super) SUPER LPAREN ActualPars:A1 RPAREN {: RESULT=new Factor_Super(A1); RESULT.setLine(A1left); :}
	| (Factor_ConstVal) Val:V1 {: RESULT=new Factor_ConstVal(V1); RESULT.setLine(V1left); :}													
	| (Factor_New) NEW Type:T1 {: RESULT=new Factor_New(T1); RESULT.setLine(T1left); :} 
	| (Factor_New_Arr) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new Factor_New_Arr(T1, E2); RESULT.setLine(T1left); :}
	| (Factor_ParenExpr) LPAREN Expr:E1 RPAREN {: RESULT=new Factor_ParenExpr(E1); RESULT.setLine(E1left); :}
	;
	
Designator ::= (Designator) DesignatorName:name DesignatorList:D1 {: RESULT=new Designator(name, D1); RESULT.setLine(nameleft); :}
;

DesignatorName ::= (Designator_Name) IDENT:name {: RESULT=new Designator_Name(name); RESULT.setLine(nameleft); :}
	;

DesignatorList ::= (DesignatorList_Arr) DesignatorList:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorList_Arr(D1, E2); RESULT.setLine(D1left); :} 
	| (DesignatorList_Field) DesignatorList:D1 DOT IDENT:name {: RESULT=new DesignatorList_Field(D1, name); RESULT.setLine(D1left); :} 
	| (EmptyDesignatorList) {: RESULT=new EmptyDesignatorList(); :} /*epsilon*/
	;


ActualPars ::= (ActualPars_Expr) Expr:E1 {: RESULT=new ActualPars_Expr(E1); RESULT.setLine(E1left); :}
	| (ActualPars_List) ActualPars:A1 COMMA Expr:E2 {: RESULT=new ActualPars_List(A1, E2); RESULT.setLine(A1left); :}
	| (NoPars) {: RESULT=new NoPars(); :} /* epsilon*/
	;

AssignOp ::= EQUAL {: RESULT=new AssignOpDerived1(); :};

AddOp ::= (Add) PLUS {: RESULT=new Add(); :}
	| (Sub) MINUS {: RESULT=new Sub(); :}
	;

MulOp ::= (Mul) STAR {: RESULT=new Mul(); :}
	| (Div) SLASH {: RESULT=new Div(); :}
	| (Mod) PERCENT {: RESULT=new Mod(); :}
	;

RelOp ::= (RelOp_EQ) EQ:t {: RESULT=new RelOp_EQ(t); RESULT.setLine(tleft); :}
	| (RelOp_NEQ) NEQ:t {: RESULT=new RelOp_NEQ(t); RESULT.setLine(tleft); :}
	| (RelOp_GRT) GRT:t {: RESULT=new RelOp_GRT(t); RESULT.setLine(tleft); :}
	| (RelOp_GRE) GRE:t {: RESULT=new RelOp_GRE(t); RESULT.setLine(tleft); :}
	| (RelOp_LSS) LSS:t {: RESULT=new RelOp_LSS(t); RESULT.setLine(tleft); :}
	| (RelOp_LSSE) LSSE:t {: RESULT=new RelOp_LSSE(t); RESULT.setLine(tleft); :}
	;
	
	
	


